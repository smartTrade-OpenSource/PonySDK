ext {
    java2htmlVersion = '5.0'
    commonsBeanutilsVersion = '1.9.3'
    commonsIoVersion = '2.6'
    commonsFileuploadVersion = '2.0.0-M2'
    gwtVersion = '2.8.2'
    jettyVersion = '12.0.22'
    springVersion = '6.2.7'
    jakartaServletVersion = '6.0.0'
    slf4jVersion = '1.8.0-alpha2'
    log4jVersion = '2.20.0'
    jsonVersion = '2.1.3'
}

dependencies {
    implementation(
            project(path: ':ponysdk', configuration: 'default'),
            'org.springframework:spring-context:' + springVersion,
            'jakarta.json:jakarta.json-api:' + jsonVersion,
            'jakarta.servlet:jakarta.servlet-api:' + jakartaServletVersion,
            'org.slf4j:slf4j-api:' + slf4jVersion,
            'de.java2html:java2html:' + java2htmlVersion,
            'org.eclipse.jetty.ee10.websocket:jetty-ee10-websocket-jakarta-client:' + jettyVersion,
            'commons-beanutils:commons-beanutils:' + commonsBeanutilsVersion,
            'commons-io:commons-io:' + commonsIoVersion,
            'org.apache.commons:commons-fileupload2-jakarta-servlet6:' + commonsFileuploadVersion,
            'com.google.code.gson:gson:2.8.8'
    )

    runtimeOnly(
            'com.google.gwt:gwt-codeserver:' + gwtVersion,
            'de.java2html:java2html:' + java2htmlVersion,
            'org.springframework:spring-aop:' + springVersion,
            'org.springframework:spring-expression:' + springVersion,
            'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
            'org.slf4j:log4j-over-slf4j:' + slf4jVersion,
            'org.slf4j:jul-to-slf4j:' + slf4jVersion,
            'org.apache.logging.log4j:log4j-api:' + log4jVersion,
            'org.apache.logging.log4j:log4j-core:' + log4jVersion,
            'org.apache.logging.log4j:log4j-slf4j2-impl:' + log4jVersion,
    )
}

task runCodeServer(type: JavaExec) {
    classpath = project(':ponysdk').configurations.gwtdev
    classpath += sourceSets.main.runtimeClasspath
    main = 'com.google.gwt.dev.codeserver.CodeServer'
    args = [
            '-src', '../ponysdk/src/main/java',
            '-generateJsInteropExports', '-noincremental',
            '-style', 'DETAILED',
            'com.ponysdk.core.PonyTerminalDebug'
    ]
    jvmArgs = ['-server', '-Xmx1024m']
}

task runSampleSpring(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(buildDir.getAbsolutePath() + '/gwt/gwt')
    classpath += files(buildDir.getAbsolutePath() + '/resources')
    classpath += files(buildDir.getAbsolutePath() + '/resources/main')
    main = 'com.ponysdk.impl.spring.MainSpring'
    //jvmArgs = ['-server', '-Xmx512m', '-Dlog4j.configurationFile=etc/log4j2.xml', '-agentlib:jdwp=transport=dt_socket,server=y,address=8888,suspend=n']
    jvmArgs = ['-Xmx8g', '-Xms8g', '-XX:-DisableExplicitGC', '-Xlog:safepoint=info,gc*=info,gc+age=trace:file=run_sample_spring_gc.log:time,uptime,level,tags:filesize=10M,filecount=100', '-Dlog4j.configurationFile=etc/log4j2.xml', '-agentlib:jdwp=transport=dt_socket,server=y,address=8888,suspend=n', '-XX:+UseConcMarkSweepGC', '-Xmn7500M', '-XX:+UseCMSInitiatingOccupancyOnly', '-XX:CMSInitiatingOccupancyFraction=80']
}

task runSampleTrading(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    classpath += files(buildDir.getAbsolutePath() + '/gwt/debug/gwt')
    classpath += files(buildDir.getAbsolutePath() + '/gwt/prod/gwt')
    classpath += files(buildDir.getAbsolutePath() + '/resources/etc')
    main = 'com.ponysdk.impl.java.Main'
    jvmArgs = ['-server', '-Xmx512m', '-Dponysdk.application.id=trading', '-Dponysdk.application.name="Trading sample"', '-Dponysdk.application.description="Trading Sample"',
               '-Dponysdk.application.context.name=trading', '-Dponysdk.entry.point.class=com.ponysdk.sample.client.TradingSampleEntryPoint',
               '-Dponysdk.application.javascripts=script/ponysdk.js;script/widget.js;script/sample.js;script/less.js', '-Dponysdk.application.stylesheets=css/sample.less;css/ponysdk.less']
}
