plugins {
    id 'jacoco'
}
ext {
    resourcesCoreTest = "src/test/resources"
    gwtOutputDirName = buildDir.name + "/gwt"
    jsinteropVersion = '1.0.2'
    glassfishVersion = '1.1.4'
    javaxValidationVersion = '2.0.1.Final'
    seleniumVersion = '3.14.0'
    junitVersion = '4.12'
    tyrusVersion = '1.15'
    mockitoVersion = '2.24.0'
    gwtVersion = '2.9.0'
    elemental2Version = '1.1.0'
    jettyVersion = '9.4.43.v20210629'
    springVersion = '5.1.3.RELEASE'
    javaxServletVersion = '4.0.1'
    slf4jVersion = '2.0.0-alpha1'
    log4jVersion = '2.10.0'
    jsonVersion = '1.1.4'
}

def versionSuffix = project.hasProperty('BUILD_RELEASE') ? "" : "-SNAPSHOT"
group = 'com.ponysdk'
version = '2.8.84' +  versionSuffix

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'ponysdk'
            from components.java
        }
    }

    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/PonySDK-Organization/PonySDK")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/jacoco/report.xml")
        html.enabled false
        csv.enabled false
    }
}

configurations {
    gwt
    gwtdev
    implementation.extendsFrom gwt
}

dependencies {
    gwt(
            'com.google.gwt:gwt-user:' + gwtVersion,
            'com.google.gwt:gwt-elemental:' + gwtVersion,
            'com.google.elemental2:elemental2-dom:' + elemental2Version
    )

    gwtdev(
            'com.google.gwt:gwt-dev:' + gwtVersion
    )

    implementation(
            'javax.validation:validation-api:' + javaxValidationVersion,
            'com.google.jsinterop:jsinterop:' + jsinteropVersion,
            'com.google.jsinterop:jsinterop-annotations:' + jsinteropVersion,
            'org.eclipse.jetty:jetty-server:' + jettyVersion,
            'org.eclipse.jetty:jetty-servlet:' + jettyVersion,
            'org.eclipse.jetty:jetty-webapp:' + jettyVersion,
            'org.eclipse.jetty:jetty-servlets:' + jettyVersion,
            'org.eclipse.jetty:jetty-client:' + jettyVersion,
            'org.eclipse.jetty:jetty-io:' + jettyVersion,
            'org.eclipse.jetty:jetty-util:' + jettyVersion,
            'org.eclipse.jetty:jetty-http:' + jettyVersion,
            'org.eclipse.jetty:jetty-security:' + jettyVersion,
            'org.eclipse.jetty:jetty-continuation:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-api:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-common:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-server:' + jettyVersion,
            'org.eclipse.jetty.websocket:websocket-servlet:' + jettyVersion,
            'org.eclipse.jetty.websocket:javax-websocket-server-impl:' + jettyVersion,
            'org.springframework:spring-core:' + springVersion,
            'org.springframework:spring-web:' + springVersion,
            'org.springframework:spring-beans:' + springVersion,
            'org.springframework:spring-context:' + springVersion,
            'org.slf4j:slf4j-api:' + slf4jVersion,
            'javax.servlet:javax.servlet-api:' + javaxServletVersion,
            'javax.json:javax.json-api:' + jsonVersion,
            'org.glassfish:javax.json:' + glassfishVersion,
            'org.seleniumhq.selenium:selenium-api:' + seleniumVersion,
            'org.glassfish.tyrus:tyrus-client:' + tyrusVersion,
            'org.glassfish.tyrus.ext:tyrus-extension-deflate:' + tyrusVersion,
            'junit:junit:' + junitVersion,
            'org.mockito:mockito-core:' + mockitoVersion
    )

    testImplementation(
            'org.seleniumhq.selenium:selenium-java:' + seleniumVersion,
            'javax.websocket:javax.websocket-client-api:1.1',
            'org.jsoup:jsoup:1.14.3',
            'org.junit.jupiter:junit-jupiter-api:5.8.1',
            'org.junit.jupiter:junit-jupiter-engine:5.8.1',
            'org.junit.platform:junit-platform-engine:1.8.1',
            'org.junit.platform:junit-platform-launcher:1.8.1'
    )

    testRuntimeOnly(
            'org.slf4j:jcl-over-slf4j:' + slf4jVersion,
            'org.slf4j:log4j-over-slf4j:' + slf4jVersion,
            'org.slf4j:jul-to-slf4j:' + slf4jVersion,
            'org.apache.logging.log4j:log4j-slf4j-impl:' + log4jVersion,
            'org.glassfish.tyrus:tyrus-container-grizzly-client:' + tyrusVersion
    )
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    classpath += configurations.gwtdev
    exclude '**/terminal/**'
}

jar {
    into('ponyterminal') {
        from gwtOutputDirName + '/gwt/ponyterminal'
    }
    exclude('*.devmode.js')
    exclude('*compilation-mappings.txt')

    manifest {
        def cmd = "git rev-parse HEAD"
        def proc = cmd.execute()
        ext.revision = proc.text.trim()

        manifest {
            attributes(
                    'Built-By': System.properties['user.name'],
                    'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
                    'Build-Revision': revision,
                    'Created-By': "Gradle ${gradle.gradleVersion}",
                    'Build-Jdk': "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
                    'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}",
                    'License-Title': "Apache License 2.0"
            )
        }
    }
}

task gwtc(type: JavaExec) {
    inputs.dir('src/main/java/com/ponysdk/core/terminal')
    outputs.dir(gwtOutputDirName + '/gwt/ponyterminal')
    description = "GWT compile to JavaScript (production mode)"
    main = 'com.google.gwt.dev.Compiler'
    workingDir = new File(gwtOutputDirName)
    classpath { [sourceSets.main.java.srcDirs, configurations.gwtdev, configurations.gwt] }
    maxHeapSize = '512M'
    args = [
            '-war',
            'gwt',
            '-localWorkers',
            Runtime.getRuntime().availableProcessors(),
            'com.ponysdk.core.PonyTerminal',
            '-generateJsInteropExports'
            // Debug Mode
            // '-style', 'DETAILED',
            // '-optimize', '0'
    ]
}

test {
    classpath = files(resourcesCoreTest, gwtOutputDirName) + classpath
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
        }
    }
}

check.dependsOn jacocoTestReport
gwtc.dependsOn classes
jar.dependsOn gwtc
publish.dependsOn check
